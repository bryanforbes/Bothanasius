# Stubs for gino.dialects.asyncpg (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from . import base
from sqlalchemy.dialects.postgresql.base import ENUM, PGCompiler, PGDialect, PGExecutionContext
from typing import Any, Optional

class AsyncpgDBAPI(base.BaseDBAPI):
    Error: Any = ...

class AsyncpgCompiler(PGCompiler):
    @property
    def bindtemplate(self): ...
    @bindtemplate.setter
    def bindtemplate(self, val: Any) -> None: ...

class AsyncpgExecutionContext(base.ExecutionContextOverride, PGExecutionContext): ...

class AsyncpgIterator:
    def __init__(self, context: Any, iterator: Any) -> None: ...
    def __anext__(self): ...

class AsyncpgCursor(base.Cursor):
    def __init__(self, context: Any, cursor: Any) -> None: ...
    def many(self, n: Any, *, timeout: Any = ...): ...
    def next(self, *, timeout: Any = ...): ...
    def forward(self, n: Any, *, timeout: Any = ...) -> None: ...

class PreparedStatement(base.PreparedStatement):
    def __init__(self, prepared: Any, clause: Optional[Any] = ...) -> None: ...

class DBAPICursor(base.DBAPICursor):
    def __init__(self, dbapi_conn: Any) -> None: ...
    def prepare(self, context: Any, clause: Optional[Any] = ...): ...
    def async_execute(self, query: Any, timeout: Any, args: Any, limit: int = ..., many: bool = ...): ...
    @property
    def description(self): ...
    def get_statusmsg(self): ...

class Pool(base.Pool):
    def __init__(self, url: Any, loop: Any, **kwargs: Any) -> None: ...
    def __await__(self): ...
    @property
    def raw_pool(self): ...
    def acquire(self, *, timeout: Optional[Any] = ...): ...
    def release(self, conn: Any) -> None: ...
    def close(self) -> None: ...

class Transaction(base.Transaction):
    def __init__(self, tx: Any) -> None: ...
    @property
    def raw_transaction(self): ...
    def begin(self) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...

class AsyncEnum(ENUM):
    def create_async(self, bind: Optional[Any] = ..., checkfirst: bool = ...) -> None: ...
    def drop_async(self, bind: Optional[Any] = ..., checkfirst: bool = ...) -> None: ...

class AsyncpgDialect(PGDialect, base.AsyncDialectMixin):
    driver: str = ...
    supports_native_decimal: bool = ...
    dbapi_class: Any = ...
    statement_compiler: Any = ...
    execution_ctx_cls: Any = ...
    cursor_cls: Any = ...
    dbapi_type_map: Any = ...
    init_kwargs: Any = ...
    colspecs: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def init_pool(self, url: Any, loop: Any): ...
    def transaction(self, raw_conn: Any, args: Any, kwargs: Any): ...
    def on_connect(self): ...
    def set_isolation_level(self, connection: Any, level: Any) -> None: ...
    def get_isolation_level(self, connection: Any): ...
    def has_schema(self, connection: Any, schema: Any): ...
    def has_table(self, connection: Any, table_name: Any, schema: Optional[Any] = ...): ...
    def has_sequence(self, connection: Any, sequence_name: Any, schema: Optional[Any] = ...): ...
    def has_type(self, connection: Any, type_name: Any, schema: Optional[Any] = ...): ...
