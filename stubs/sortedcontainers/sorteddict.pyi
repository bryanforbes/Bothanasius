# flake8: noqa
# Stubs for sortedcontainers.sorteddict (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .sortedlist import SortedList, recursive_repr
from .sortedset import SortedSet
from collections import ItemsView, KeysView, Sequence, ValuesView
from typing import Optional, Type, TypeVar, Generic, Tuple, Dict, Iterator, Iterable, Union, Mapping, overload

_T = TypeVar('_T')
_KT = TypeVar('_KT')
_VT = TypeVar('_VT')
_KT_co = TypeVar('_KT_co', covariant=True)
_VT_co = TypeVar('_VT_co', covariant=True)

_SD = TypeVar('_SD', bound=SortedDict)

class SortedDict(Dict[_KT, _VT]):
    @overload
    def __init__(self, __m: Mapping[_KT, _VT], **kwargs: _VT) -> None: ...
    @overload
    def __init__(self, __m: Iterable[Tuple[_KT, _VT]], **kwargs: _VT) -> None: ...
    @overload
    def __init__(self, **kwargs: _VT) -> None: ...
    @property
    def iloc(self) -> SortedKeysView[_KT]: ...
    def clear(self) -> None: ...
    def __delitem__(self, key: _KT) -> None: ...
    def __iter__(self) -> Iterator[_KT]: ...
    def __reversed__(self) -> Iterator[_KT]: ...
    def __setitem__(self, key: _KT, value: _VT) -> None: ...
    def copy(self: _SD) -> _SD: ...
    def __copy__(self: _SD) -> _SD: ...
    @classmethod
    def fromkeys(cls: Type[_SD], iterable: Iterable[_KT], value: Optional[_VT] = ...) -> _SD: ...  # type: ignore
    def keys(self) -> SortedKeysView[_KT]: ...
    def items(self) -> SortedItemsView[_KT, _VT]: ...
    def values(self) -> SortedValuesView[_VT]: ...
    class _NotGiven: ...
    @overload
    def pop(self, k: _KT) -> _VT: ...
    @overload
    def pop(self, k: _KT, default: Union[_VT, _T] = ...) -> Union[_VT, _T]: ...
    def popitem(self, index: int = ...) -> Tuple[_KT, _VT]: ...
    def peekitem(self, index: int = ...) -> Tuple[_KT, _VT]: ...
    def setdefault(self, key: _KT, default: Optional[_VT] = ...) -> Optional[_VT]: ...  # type: ignore
    @overload
    def update(self, __m: Mapping[_KT, _VT], **kwargs: _VT) -> None: ...
    @overload
    def update(self, __m: Iterable[Tuple[_KT, _VT]], **kwargs: _VT) -> None: ...
    @overload
    def update(self, **kwargs: _VT) -> None: ...

class SortedKeysView(KeysView[_KT_co], Sequence[_KT_co], Generic[_KT_co]):
    @overload
    def __getitem__(self, index: int) -> _KT_co: ...
    @overload
    def __getitem__(self, index: slice) -> Sequence[_KT_co]: ...
    @overload
    def __delitem__(self, index: int) -> None: ...
    @overload
    def __delitem__(self, index: slice) -> None: ...

class SortedItemsView(ItemsView[_KT_co, _VT_co], Sequence[Tuple[_KT_co, _VT_co]], Generic[_KT_co, _VT_co]):  # type: ignore
    @overload
    def __getitem__(self, index: int) -> Tuple[_KT_co, _VT_co]: ...
    @overload
    def __getitem__(self, index: slice) -> Sequence[Tuple[_KT_co, _VT_co]]: ...
    @overload
    def __delitem__(self, index: int) -> None: ...
    @overload
    def __delitem__(self, index: slice) -> None: ...

class SortedValuesView(ValuesView[_VT_co], Sequence[_VT_co], Generic[_VT_co]):
    @overload
    def __getitem__(self, index: int) -> _VT_co: ...
    @overload
    def __getitem__(self, index: slice) -> Sequence[_VT_co]: ...
    @overload
    def __delitem__(self, index: int) -> None: ...
    @overload
    def __delitem__(self, index: slice) -> None: ...
