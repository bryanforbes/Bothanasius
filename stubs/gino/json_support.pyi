# flake8: noqa
# Stubs for gino.json_support (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Generic, TypeVar, List, overload
import datetime

class Hook:
    parent: Any = ...
    method: Any = ...
    def __init__(self, parent: Any) -> None: ...
    def __call__(self, method: Any): ...
    def call(self, instance: Any, val: Any): ...

_T = TypeVar('_T')

class JSONProperty(Generic[_T]):
    name: Any = ...
    default: Optional[_T] = ...
    column_name: str = ...
    expression: Hook = ...
    after_get: Hook = ...
    before_set: Hook = ...
    def __init__(self, default: Optional[_T] = ..., column_name: str = ...) -> None: ...
    def __get__(self, instance: Any, owner: Any): ...
    def __set__(self, instance: Any, value: Any) -> None: ...
    def __delete__(self, instance: Any) -> None: ...
    def get_profile(self, instance: Any): ...
    def save(self, instance: Any, value: Any = ...): ...
    def reload(self, instance: Any): ...
    def make_expression(self, base_exp: Any): ...
    def decode(self, val: Any): ...
    def encode(self, val: Any): ...
    def __hash__(self) -> int: ...

class StringProperty(JSONProperty[str]):
    def make_expression(self, base_exp: Any): ...

class DateTimeProperty(JSONProperty[datetime.datetime]):
    def make_expression(self, base_exp: Any): ...
    def decode(self, val: Any): ...
    def encode(self, val: Any): ...

class IntegerProperty(JSONProperty[int]):
    def make_expression(self, base_exp: Any): ...
    def decode(self, val: Any): ...
    def encode(self, val: Any): ...

class BooleanProperty(JSONProperty[bool]):
    def make_expression(self, base_exp: Any): ...
    def decode(self, val: Any): ...
    def encode(self, val: Any): ...

class ObjectProperty(JSONProperty[Any]):
    def decode(self, val: Any): ...
    def encode(self, val: Any): ...

class ArrayProperty(JSONProperty[List[Any]]):
    def decode(self, val: Any): ...
    def encode(self, val: Any): ...
