# flake8: noqa
# Stubs for gino.loader (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .declarative import Model
from typing import Any, TypeVar

class Loader:
    @classmethod
    def get(cls, value: Any): ...
    @property
    def query(self): ...
    def do_load(self, row: Any, context: Any) -> None: ...
    def get_columns(self): ...
    def get_from(self): ...
    def __getattr__(self, item: Any): ...

_ML = TypeVar('_ML', bound=ModelLoader)

class ModelLoader(Loader):
    model: Any = ...
    columns: Any = ...
    extras: Any = ...
    on_clause: Any = ...
    def __init__(self, model: Any, *column_names: Any, **extras: Any) -> None: ...
    def do_load(self, row: Any, context: Any): ...
    def get_columns(self) -> None: ...
    def get_from(self): ...
    def load(self: _ML, *column_names: Any, **extras: Any) -> _ML: ...
    def on(self: _ML, on_clause: Any) -> _ML: ...
    def distinct(self: _ML, *columns: Any) -> _ML: ...
    def none_as_none(self: _ML, enabled: bool = ...) -> _ML: ...

class AliasLoader(ModelLoader):
    def __init__(self, alias: Any, *column_names: Any, **extras: Any) -> None: ...

class ColumnLoader(Loader):
    column: Any = ...
    def __init__(self, column: Any) -> None: ...
    def do_load(self, row: Any, context: Any): ...

class TupleLoader(Loader):
    loaders: Any = ...
    def __init__(self, values: Any) -> None: ...
    def do_load(self, row: Any, context: Any): ...

class CallableLoader(Loader):
    func: Any = ...
    def __init__(self, func: Any) -> None: ...
    def do_load(self, row: Any, context: Any): ...

class ValueLoader(Loader):
    value: Any = ...
    def __init__(self, value: Any) -> None: ...
    def do_load(self, row: Any, context: Any): ...
