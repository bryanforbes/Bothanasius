# flake8: noqa

from .api import GinoExecutor
from .declarative import Model
from .exceptions import NoSuchRowError
from .loader import AliasLoader, ModelLoader
from .engine import GinoEngine
from typing import Any, Optional, Dict, Iterator, ClassVar, TypeVar, Type, overload
from typing_extensions import Protocol
from sqlalchemy.sql.dml import Update as _SAUpdate, Delete as _SADelete
from sqlalchemy.sql.selectable import Select as _SASelect, Alias as _SAAlias
from sqlalchemy.sql.elements import BooleanClauseList
from sqlalchemy.sql.schema import Column as _SAColumn

DEFAULT: Any

_T_co = TypeVar('_T_co', covariant=True)
_CM = TypeVar('_CM', bound=CRUDModel)

class _CreateWithoutInstance(Protocol[_T_co]):
    async def __call__(self, bind: Optional[GinoEngine] = ..., timeout: int = ..., **values: Any) -> _T_co: ...

class _CreateWithInstance(Protocol[_T_co]):
    async def __call__(self, bind: Optional[GinoEngine] = ..., timeout: int = ...) -> _T_co: ...

class _Create:
    @overload
    def __get__(self, instance: None, owner: Type[_CM]) -> _CreateWithoutInstance[_CM]: ...
    @overload
    def __get__(self, instance: _CM, owner: Any) -> _CreateWithInstance[_CM]: ...

class _GinoSelect(_SASelect):
    gino: GinoExecutor

class _Query:
    def __get__(self, instance: Any, owner: Any) -> _GinoSelect: ...

class _SelectMethod(Protocol):
    def __call__(self, *args: Any) -> _GinoSelect: ...

class _Select:
    def __get__(self, instance: Any, owner: Any) -> _SelectMethod: ...

class _UpdateWithInstance(Protocol):
    def __call__(self, **values: Any) -> UpdateRequest: ...

class _GinoUpdate(_SAUpdate):
    gino: GinoExecutor

class _Update:
    @overload
    def __get__(self, instance: None, owner: Type[_CM]) -> _GinoUpdate: ...
    @overload
    def __get__(self, instance: _CM, owner: Any) -> _UpdateWithInstance: ...

class _DeleteWithInstance(Protocol):
    def __call__(self, bind: Optional[GinoEngine] = ..., timeout: int = ...) -> int: ...

class _GinoDelete(_SADelete):
    gino: GinoExecutor

class _Delete:
    @overload
    def __get__(self, instance: None, owner: Type[_CM]) -> _GinoDelete: ...
    @overload
    def __get__(self, instance: _CM, owner: Any) -> _DeleteWithInstance: ...

class UpdateRequest:
    async def apply(self, bind: Optional[GinoEngine] = ..., timeout: int = ...) -> UpdateRequest: ...
    def update(self, **values: Any) -> UpdateRequest: ...

class Alias:
    model: Any = ...
    alias: _SAAlias = ...
    def __init__(self, model: Any, name: Optional[str] = ..., flat: bool = ...) -> None: ...
    def __getattr__(self, item: Any): ...
    def __iter__(self) -> Iterator[_SAColumn]: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def load(self, *column_names: Any, **relationships: Any) -> AliasLoader: ...
    def on(self, on_clause: Any) -> AliasLoader: ...

class CRUDModel(Model):
    create: ClassVar[_Create] = ...
    query: ClassVar[_Query] = ...
    update: ClassVar[_Update] = ...
    delete: ClassVar[_Delete] = ...
    select: ClassVar[_Select] = ...
    __profile__: Any = ...
    def __init__(self, **values: Any) -> None: ...
    @classmethod
    async def get(cls: Type[_CM], ident: Any, bind: Optional[GinoEngine] = ..., timeout: int = ...) -> Optional[_CM]: ...
    def append_where_primary_key(self, q: _GinoSelect) -> _GinoSelect: ...
    def lookup(self) -> BooleanClauseList: ...
    def to_dict(self) -> Dict[str, Any]: ...
    @classmethod
    def load(cls, *column_names: Any, **relationships: Any) -> ModelLoader: ...
    @classmethod
    def on(cls, on_clause: Any) -> ModelLoader: ...
    @classmethod
    def distinct(cls, *columns: Any) -> ModelLoader: ...
    @classmethod
    def none_as_none(cls, enabled: bool = ...) -> ModelLoader: ...
    @classmethod
    def alias(cls, model: Any, name: Optional[str] = ..., flat: bool = ...) -> Alias: ...
